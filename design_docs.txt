Seattle Bike Shop Map
Displays markers of seattle bike shops, and bike repair stations for South, North, and central Seattle.

Features:
    * Local Seattle bike paths are visable and can be toggled on or off
    * The marker color of shops on the map is dependent on the shop's elevation

Udacity Project Reqs:
    * Display a map of a neighborhood
        * Display markers for specific points of interest
        * On click
            * Open details on map
            * Animate map marker
    * Display a list of points of interest
        * On click
            * Open details on map
            * Animate map marker
        * Allow filtering and searching of map marker list
            * Searchable by text
            * Filter by attribute
    * Minimum 5 points of interest
    * Utilizes Google Maps api
    * Utilizes at least one other non-Google api
    * All data requests are asynchronous
    * Error handling:
        * All basic functionality must be error-free
        * If an error occures, either display gracefully or no UI disruption
            * No need to handle user going offline

Stand-out Reqs:
    * Allow user to 'favorite' a location
    ** Incoorporate Grunt build process
    ** Data persists when app is closed (localStorage)
    ** Include additional apis beyond reqs
    * Style markers differently depending on type
    * Build a more robust filtering/searching tool

MVVM Design:
    Models:
        * Bike shop
            Properties:
                name
                latitude
                longitude
                elevation
                placeID
                address
    ViewModel:
        * Builds marker data array
            * Queries places API
            * Checks localstorage
                * If localstorage contains 'favorite' by place_ID, add favorite property to place
                * If elevation info in localstorage, add to place ID, else query for elevation
            * Create marker, add to map, add to list
        * On marker/listItem click:
            * Get shop image:
                * Query by place ID
                * Get streetview image
            * Get rating:
                * Query google/yelp/forsquare rating
            * Get reviews:
                * Query Google/yelp(?)
        * Handle sort/search of markers
            * Primary filter function - Runs at every keystroke, retrieves filters and search string
                * By elevation - Get status of elevation radio button
                * ? By price - Allow selection of number of $s in radio button
                * ? By open time - Check current device time, compare to open hours for bike shop
                * ? Closeby - Get current position, calculate lat/lon difference
                * Search: Match to any text input
    Map:
        * Create map centered around downtown Seattle




Libraries:
    Fuse.js:
        Handles searching of points to narrow down results

API Request design:
    Google Maps Javascript API:

    Google Places API (https://developers.google.com/maps/documentation/javascript/places#TextSearchRequests):
        Search params:
            type: 'bicycle_store'

Data Storage:
    * Previous searches Place IDs:
        * Bool: Favorite
        *
    *